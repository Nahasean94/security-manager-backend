"use strict"
const express = require('express')
const graphqlHTTP = require('express-graphql')
const schema = require('./schema/schema')

const app = express()

app.use('/graphql', graphqlHTTP({schema,graphiql:true}))


app.listen(3000, () => {
    console.log("Server running on port 3000")
})




const BookType = new GraphQLObjectType({
    name: 'Book',
    fields: () => ({
        id: {type: GraphQLID},
        name: {type: GraphQLString},
        genre: {type: GraphQLString},
        author: {
            type: AuthorType,
            resolve: (parent, args) => {
                return queries.getAuthor({id: parent.author})
            }
        },
    })
})
const AuthorType = new GraphQLObjectType({
    name: 'Author',
    fields: () => ({
        id: {type: GraphQLID},
        name: {type: GraphQLString},
        age: {type: GraphQLInt},
        books: {
            type: new GraphQLList(BookType),
            resolve(parent, args) {
                return queries.getBooksByAuthor({author: parent.id})
            }
        }

    })
})

const RootQuery = new GraphQLObjectType({
    name: 'RootQueryType',
    fields: {
        book: {
            type: BookType,
            args: {id: {type: GraphQLID}},
            resolve(parent, args) {
                return queries.getBook({id: args.id})
            }
        },
        books: {
            type: new GraphQLList(BookType),
            resolve: () => {
                return queries.getBooks()
            }
        },
        authorBooks: {
            type: new GraphQLList(BookType),
            args:{authorId:{type:GraphQLString}},
            resolve: (parent,args) => {
                return queries.getBooksByAuthor(args)
            }
        },
        author: {
            type: AuthorType,
            args: {id: {type: GraphQLID}},
            resolve(parent, args) {
                return queries.getAuthor({id: args.id})
            }
        },
        authors: {
            type: new GraphQLList(AuthorType),
            resolve: () => {
                return queries.getAuthors()
            }
        },
    }
})
const Mutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {
        addBook: {
            type: BookType,
            args: {
                name: {type: GraphQLString},
                genre: {type: GraphQLString},
                author: {type: GraphQLID}
            },
            resolve(parent, args) {
                return queries.addBook(args)
            }
        },
        addAuthor: {
            type: AuthorType,
            args: {
                name: {type: GraphQLString},
                age: {type: GraphQLInt}
            },
            resolve(parent, args) {
                return queries.addAuthor(args)
            }
        }
    }
})

module.exports = new GraphQLSchema({query: RootQuery, mutation: Mutation})